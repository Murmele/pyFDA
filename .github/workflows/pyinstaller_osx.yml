# workflow for buildung pyinstaller packages for windows and MacOS
# see https://data-dive.com/multi-os-deployment-in-cloud-using-pyinstaller-and-github-actions
#
# The workflow only runs with a proper tag v*, so something similar to
#
#   git tag v0.4.5
#   git push
#   git push origin --tags
#
# is required.
---
name: pyinstaller_osx

on:
  push:
#     branches:
#       - develop
#       - main
    tags:
    - 'v*' # Push events with proper version number, i.e. v1.0, v20.15.10

jobs:

  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  build:
    name: Build packages
    needs: createrelease
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    # ---
    - name: Install dependencies and pyinstaller
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pyinstaller-hooks-contrib
    # ---
    - name: Build with pyinstaller for MacOS
      run:
        pyinstaller pyfdax_mac.spec &&
        ls -la dist&&
        ls -la dist/pyfdax_osx_dir&&
        less dist/pyfdax_osx.app&&
        unzip -l dist/pyfdax_osx
    # ---
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    # ---
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
    # ---
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/   # pyfdax_osx.app
        asset_name: pyfdax_osx  # pyfdax_osx.app
        asset_content_type: application/zip