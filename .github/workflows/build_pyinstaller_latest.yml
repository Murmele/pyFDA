# workflow for buildung pyinstaller packages for windows and MacOS and creating a pre-release
# see https://data-dive.com/multi-os-deployment-in-cloud-using-pyinstaller-and-github-actions
#
# The workflow runs for push events on the main branch and when manually triggered

---
name: build_pyinstaller_latest

on:
  push:
    branches: main
  workflow_dispatch:

jobs:
  build:
    name: Build packages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # ---
          - os: windows-latest
          # ---
            TARGET: windows
            CMD_BUILD: >
                pyinstaller pyfdax.spec &&
                mv dist/pyfdax.exe dist/pyfdax_win.exe
            OUT_FILE_NAME: pyfdax_win.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
          # ---
          - os: macos-latest
          # ---
            TARGET: macos
            CMD_BUILD: >
                pyinstaller pyfdax.spec &&
                mv dist/pyfdax dist/pyfdax_osx
            OUT_FILE_NAME: pyfdax_osx  # .app  # pyfda.zip
            ASSET_MIME: application/zip

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pyinstaller-hooks-contrib
    - name: Build with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}

    - name: Upload builds as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.OUT_FILE_NAME}}
        path: ./dist/${{ matrix.OUT_FILE_NAME}}

  release:
    name: Release packages
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: .
    # not specifying the file names downloads all artifacts. However, 
    # an individual directory is created for each file identical to its name

    - name: Display structure of downloaded files
      run: ls -R  

    - name: Update release
      if: success()
      uses: pyTooling/Actions/releaser@main
      with:
        tag: latest
        rm: false
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          pyfdax_win.exe/pyfdax_win.exe
          pyfdax_osx/pyfdax_osx

