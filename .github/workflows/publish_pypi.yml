# Build a distribution package and upload it to PyPI
# https://www.seanh.cc/2022/05/21/publishing-python-packages-from-github-actions/
# https://packaging.python.org/en/latest/tutorials/packaging-projects/#generating-distribution-archives
# https://github.com/marketplace/actions/pypi-publish

# Workflow for building a pip package and uploading it to PyPI
# see https://data-dive.com/multi-os-deployment-in-cloud-using-pyinstaller-and-github-actions
#
# OpenID connect (OIDC) provides short-lived credentials ("OIDC tokens")
# for upload to PyPI, see https://docs.pypi.org/trusted-publishers/
#
# The workflow runs:
#  - when manually triggered
#  - for push events with a proper tag v*, creating a versioned release
#
#    This requires a workflow like
#
#     <update version.py>      # PyPI version number is created from this
#     git tag v0.4.5           # create new local tag
#     git push                 # push to origin (without tag)
#     git push origin --tags   # push tag to origin
#
#   Tags can be deleted with:
#
#     git tag -d <tag_name>
#     git push --delete origin <tag_name>

name: Publish to PyPI.org
on:
  release:
    types: [published]
  # Run upon push to main branch (disabled, only for tagged releases):
  # push:
  #  branches: [ main ]
  # Run manually from the Actions tab:
  workflow_dispatch:

jobs:
  pypi:
    runs-on: ubuntu-latest
    # ---- only needed for 'trusted publishing' from Github -> PyPI ---- #
    # ---- via OIDC, no username / password or API token is needed  ---- #
    environment:
      name: pypi
      url: https://pypi.org/p/pyfda
    # IMPORTANT: this permission is mandatory for trusted publishing
    permissions:
      id-token: write
    # ------------------------------------------------------------------ #
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3
        # fetch complete history for all branches
        with:
          fetch-depth: 0

      # Sets up python3, installing a version of Python or PyPy and (by default)
      # adds it to the PATH
      # Optionally: caches dependencies for pip, pipenv and poetry
      # Registers problem matchers for error output (?)
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Install build package and build the pip packages
      - run: |
          python3 -m pip install --upgrade build
          python3 -m build
          echo Build successful!
      # Upload the package to PyPI for tagged releases only
      - name: Publish package
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        # not needed for trusted publishing
        # with:
        #  password: ${{ secrets.PYPI_API_TOKEN }}
